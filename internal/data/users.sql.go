// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package data

import (
	"context"
	"database/sql"
)

const userAdd = `-- name: UserAdd :exec
INSERT INTO users (name, email, role, password_hash)
VALUES (?, ?, ?, ?)
`

type UserAddParams struct {
	Name         string
	Email        string
	Role         string
	PasswordHash string
}

func (q *Queries) UserAdd(ctx context.Context, arg UserAddParams) error {
	_, err := q.db.ExecContext(ctx, userAdd,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.PasswordHash,
	)
	return err
}

const userGetByEmail = `-- name: UserGetByEmail :one
SELECT email, name, role, role_set_by, password_hash FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) UserGetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, userGetByEmail, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Name,
		&i.Role,
		&i.RoleSetBy,
		&i.PasswordHash,
	)
	return i, err
}

const userUpdate = `-- name: UserUpdate :exec
UPDATE users
SET email = ?, name = ?, role = ?, role_set_by = ?, password_hash = ?
WHERE email = ?
`

type UserUpdateParams struct {
	Email        string
	Name         string
	Role         string
	RoleSetBy    sql.NullString
	PasswordHash string
	Email_2      string
}

func (q *Queries) UserUpdate(ctx context.Context, arg UserUpdateParams) error {
	_, err := q.db.ExecContext(ctx, userUpdate,
		arg.Email,
		arg.Name,
		arg.Role,
		arg.RoleSetBy,
		arg.PasswordHash,
		arg.Email_2,
	)
	return err
}
